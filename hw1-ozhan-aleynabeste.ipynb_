{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"hw1-ozhan-aleynabeste.ipynb ","provenance":[{"file_id":"1oaND2JfsHI7Nz80UomPHvp1pw3msFL03","timestamp":1603233756720},{"file_id":"1xRkyrtlSrnvuwGt-iyjqpj2aeq-RKyij","timestamp":1603174701162},{"file_id":"1LD1agQEurFg1sEmOkljUcEGO3zrDXiDB","timestamp":1570126140205},{"file_id":"1WNKkn0T0QmKV125cSXAaFPV1e92uYGvA","timestamp":1550596851243},{"file_id":"1gorJcowuOZjs8Y8D3LfZrzmBemEDRzHp","timestamp":1538904650180}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"voHKcAfRfdNY"},"source":["# CS412 - Machine Learning - 2020\n","## Homework 1\n","100 pts\n","\n","\n","## Goal\n","\n","The goal of this homework is three-fold:\n","\n","*   Introduction to the machine learning experimental set up \n","*   Gain experience with Decision tree approache\n","*   Gain experience with the Scikit library\n","\n","## Dataset\n","**MNIST** is a collection of 28x28 grayscale images of digits (0-9); hence each pixel is a gray-level from 0-255. \n","\n","**Download the data from Keras. You must use a 20% of the training data for validation** (no need for cross-validation as you have plenty of data) and **use the official test data (10,000 samples) only for testing.**\n","\n","## Task \n","Build a decision tree classifier with the scikit library function calls to classify digits in the MNIST dataset.\n","\n","## Software: You may find the necessary function references here:\n","http://scikit-learn.org/stable/supervised_learning.html\n","\n","## Submission: \n","Fill this notebook and submit this document with a link to #your Colab notebook \n","(make sure to include the link obtained from the #share link on top right)\n"]},{"cell_type":"markdown","metadata":{"id":"_YOYiWvHbNDW"},"source":["##1) Initialize\n","\n","*   First make a copy of the notebook given to you as a starter.\n","\n","*   Make sure you choose Connect form upper right.\n"]},{"cell_type":"markdown","metadata":{"id":"MM-wwHR8qL0M"},"source":["## 2) Load training dataset\n","\n","*  Read from Keras library.\n","\n"]},{"cell_type":"code","metadata":{"id":"Iz3iMpjVfa5I","executionInfo":{"status":"ok","timestamp":1603828640262,"user_tz":-180,"elapsed":2919,"user":{"displayName":"Aleyna Beste Ozhan (Student)","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnDvkucs9zmR2-jO2q7YpPwblf0-m-Hsi4bD7_=s64","userId":"14382920986541660027"}},"outputId":"2ed44298-4cae-4b51-d090-9e0f06a52a94","colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["# Load the Pandas libraries with alias 'pd' \n","import pandas as pd \n","from keras.datasets import mnist\n","import numpy as np\n","\n","(x_train, y_train), (x_test, y_test) = mnist.load_data()\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n","11493376/11490434 [==============================] - 0s 0us/step\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"8NdW2ItjHLxJ"},"source":["##3) Understanding the dataset\n","\n","There are alot of functions that can be used to know more about this dataset\n","\n","- What is the shape of the training set (num of samples X number of attributes) ***[shape function can be used]***\n","\n","- Display attribute names ***[columns function can be used]***\n","\n","- Display the first 5 rows from training dataset ***[head or sample functions can be used]***\n","\n",".."]},{"cell_type":"code","metadata":{"id":"CA_AjGQasjvS","executionInfo":{"status":"ok","timestamp":1603828644987,"user_tz":-180,"elapsed":2121,"user":{"displayName":"Aleyna Beste Ozhan (Student)","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnDvkucs9zmR2-jO2q7YpPwblf0-m-Hsi4bD7_=s64","userId":"14382920986541660027"}},"outputId":"90f2287f-175f-4a41-b503-112c497f5383","colab":{"base_uri":"https://localhost:8080/","height":406}},"source":["\n","# print shape\n","print('2D x_train data dimensionality: ',x_train.shape )\n","print('y_train data dimensionality: ', y_train.shape)\n","print('2D x_test data dimensionality: ', x_test.shape)\n","print('y_test data dimensionality: ', y_test.shape)\n","\n","\n","#reshape the data because now its in the format of 2d, which is not suitable for model fitting \n","\n","s=x_train.shape\n","x_train_r=np.reshape(x_train, (s[0], s[1]*s[2])).astype('float32')\n","\n","st=x_test.shape\n","x_test_r=np.reshape(x_test, (st[0], st[1]*st[2])).astype('float32')\n","\n","from sklearn.preprocessing import normalize\n","x_train_r=normalize(x_train_r)\n","x_test_r=normalize(x_test_r)\n","\n","\n","# print shape of reshaped data\n","print('reshaped train data dimensionality: ',x_train_r.shape )\n","print('reshaped test data dimensionality: ', x_test_r.shape)\n","\n","\n","\n","#print the attribute names\n","print('Attributes Names: ')\n","print(pd.DataFrame(x_train_r).columns)\n","\n","\n","# print first 5 rows in your dataset\n","print(\"head of the data:\")\n","pd.DataFrame(x_train_r).head(5)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["2D x_train data dimensionality:  (60000, 28, 28)\n","y_train data dimensionality:  (60000,)\n","2D x_test data dimensionality:  (10000, 28, 28)\n","y_test data dimensionality:  (10000,)\n","reshaped train data dimensionality:  (60000, 784)\n","reshaped test data dimensionality:  (10000, 784)\n","Attributes Names: \n","RangeIndex(start=0, stop=784, step=1)\n","head of the data:\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>7</th>\n","      <th>8</th>\n","      <th>9</th>\n","      <th>10</th>\n","      <th>11</th>\n","      <th>12</th>\n","      <th>13</th>\n","      <th>14</th>\n","      <th>15</th>\n","      <th>16</th>\n","      <th>17</th>\n","      <th>18</th>\n","      <th>19</th>\n","      <th>20</th>\n","      <th>21</th>\n","      <th>22</th>\n","      <th>23</th>\n","      <th>24</th>\n","      <th>25</th>\n","      <th>26</th>\n","      <th>27</th>\n","      <th>28</th>\n","      <th>29</th>\n","      <th>30</th>\n","      <th>31</th>\n","      <th>32</th>\n","      <th>33</th>\n","      <th>34</th>\n","      <th>35</th>\n","      <th>36</th>\n","      <th>37</th>\n","      <th>38</th>\n","      <th>39</th>\n","      <th>...</th>\n","      <th>744</th>\n","      <th>745</th>\n","      <th>746</th>\n","      <th>747</th>\n","      <th>748</th>\n","      <th>749</th>\n","      <th>750</th>\n","      <th>751</th>\n","      <th>752</th>\n","      <th>753</th>\n","      <th>754</th>\n","      <th>755</th>\n","      <th>756</th>\n","      <th>757</th>\n","      <th>758</th>\n","      <th>759</th>\n","      <th>760</th>\n","      <th>761</th>\n","      <th>762</th>\n","      <th>763</th>\n","      <th>764</th>\n","      <th>765</th>\n","      <th>766</th>\n","      <th>767</th>\n","      <th>768</th>\n","      <th>769</th>\n","      <th>770</th>\n","      <th>771</th>\n","      <th>772</th>\n","      <th>773</th>\n","      <th>774</th>\n","      <th>775</th>\n","      <th>776</th>\n","      <th>777</th>\n","      <th>778</th>\n","      <th>779</th>\n","      <th>780</th>\n","      <th>781</th>\n","      <th>782</th>\n","      <th>783</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.065585</td>\n","      <td>0.112431</td>\n","      <td>0.018739</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 784 columns</p>\n","</div>"],"text/plain":["   0    1    2    3    4    5    6    ...  777  778  779  780  781  782  783\n","0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n","1  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n","2  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n","3  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n","4  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n","\n","[5 rows x 784 columns]"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"markdown","metadata":{"id":"Vop4rwZVxh9Z"},"source":["##4) Shuffle and Split TRAINING data as train (also called development) (80%) and validation (20%) "]},{"cell_type":"code","metadata":{"id":"KEhk8R24xhdY","executionInfo":{"status":"ok","timestamp":1603828648615,"user_tz":-180,"elapsed":755,"user":{"displayName":"Aleyna Beste Ozhan (Student)","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnDvkucs9zmR2-jO2q7YpPwblf0-m-Hsi4bD7_=s64","userId":"14382920986541660027"}},"outputId":"9904df0e-3c74-4b5e-8d40-7a092cbe7c7d","colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["from sklearn.utils import shuffle\n","\n","from sklearn.model_selection import train_test_split\n","\n","# Shuffle the training data\n","# Split 80-20\n","training_x, validation_x, train_y, validation_y= train_test_split(x_train_r,y_train, shuffle=\"true\", test_size = 0.2, random_state=0)\n","\n","print(\"Training set shape is: \", training_x.shape)\n","print(\"Validation set shape is: \", validation_x.shape)\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Training set shape is:  (48000, 784)\n","Training set shape is:  (12000, 784)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"xR1oMsPu0AV_"},"source":["##5) Train a decision tree classifier on development/train data and do model selection using the validation data\n","\n","* Train 3 decision tree classifiers with different values of \"min_samples_split\" which is the minimum number of samples required to split an internal node:  min_samples_split = [default = 2, 5, 10]. \n","* Test the 3 models on validation set and choose the best one.\n","* Plot the train and validation set errors for those 3 settings - on one plot. \n"]},{"cell_type":"code","metadata":{"id":"Nv6oac-T3Wy5","executionInfo":{"status":"ok","timestamp":1603828769491,"user_tz":-180,"elapsed":91144,"user":{"displayName":"Aleyna Beste Ozhan (Student)","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnDvkucs9zmR2-jO2q7YpPwblf0-m-Hsi4bD7_=s64","userId":"14382920986541660027"}},"outputId":"d7c20468-0c43-4776-ae06-5eeda0fe7cdf","colab":{"base_uri":"https://localhost:8080/","height":415}},"source":["from sklearn.tree import DecisionTreeClassifier\n","import matplotlib.pyplot as plt\n","from sklearn.metrics import accuracy_score\n","\n","#create models\n","model_1 = DecisionTreeClassifier(min_samples_split=2)\n","model_2 = DecisionTreeClassifier(min_samples_split=5)\n","model_3 = DecisionTreeClassifier(min_samples_split=10)\n","\n","\n","# Train decision tree classifiers\n","model_1.fit(training_x,train_y)\n","model_2.fit(training_x,train_y)\n","model_3.fit(training_x,train_y)\n","\n","\n","# Evaluate on validation set\n","y_pred3 = model_3.predict(validation_x)\n","y_pred2 = model_2.predict(validation_x)\n","y_pred = model_1.predict(validation_x)\n","error_list=[accuracy_score(validation_y, y_pred), accuracy_score(validation_y, y_pred2), accuracy_score(validation_y, y_pred3) ]\n","\n","\n","print(\"accuracy score of the model 1 on validation set with min_samples_split=2 is \", error_list[0])\n","print(\"accuracy score of the model 2 on validation set with min_samples_split=5 is \", error_list[1])\n","print(\"accuracy score of the model 3 on validation set  with min_samples_split=10 is \", error_list[2])\n","\n","# evaluate on training set\n","\n","y_pred3_t = model_3.predict(training_x)\n","y_pred2_t = model_2.predict(training_x)\n","y_pred_t= model_1.predict(training_x)\n","error_list_on_train=[accuracy_score(train_y, y_pred_t), accuracy_score(train_y, y_pred2_t), accuracy_score(train_y, y_pred3_t) ]\n","\n","\n","print(\"accuracy score of the model 1 on training set with min_samples_split=2 is \", error_list_on_train[0])\n","print(\"accuracy score of the model 2 on training set with min_samples_split=5 is \", error_list_on_train[1])\n","print(\"accuracy score of the model 3 on training set with min_samples_split=10 is \", error_list_on_train[2])\n","\n","# Plot errors\n","plt.title('Accuracy Scores of Three Models on Train and Validation Set')\n","plt.xlabel(\"min_samples_split\")\n","plt.ylabel(\"accuracy score\")\n","\n","\n","plt.plot( [2,5,10], error_list,'g*',[2,5,10], error_list_on_train, 'r+'  )\n","plt.legend([\"Validation\", \"Train\"])\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["accuracy score of the model 1 on validation set with min_samples_split=2 is  0.8700833333333333\n","accuracy score of the model 2 on validation set with min_samples_split=5 is  0.8685833333333334\n","accuracy score of the model 3 on validation set  with min_samples_split=10 is  0.8684166666666666\n","accuracy score of the model 1 on training set with min_samples_split=2 is  1.0\n","accuracy score of the model 2 on training set with min_samples_split=5 is  0.9826875\n","accuracy score of the model 3 on training set with min_samples_split=10 is  0.9665208333333334\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<matplotlib.legend.Legend at 0x7fbf27d785f8>"]},"metadata":{"tags":[]},"execution_count":6},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"BmHyKNPePSZa"},"source":["chosen model is model 1, DTC with min_samples_split=2 because it gives highest accuracy on validation set which is 0.87."]},{"cell_type":"markdown","metadata":{"id":"boqe46St1--f"},"source":["## 7) Test your CHOSEN classifier on Test set\n","\n","- Load test data\n","- Apply same pre-processing as training data (probably none)\n","- Predict the labels of testing data **using the best chosen SINGLE model out of the models that you have tried from step 6 (you have selected your model according to your validation results)** and report the accuracy. "]},{"cell_type":"code","metadata":{"id":"IPLke8jyFGng","executionInfo":{"status":"ok","timestamp":1603829383267,"user_tz":-180,"elapsed":851,"user":{"displayName":"Aleyna Beste Ozhan (Student)","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhnDvkucs9zmR2-jO2q7YpPwblf0-m-Hsi4bD7_=s64","userId":"14382920986541660027"}},"outputId":"ce2ffd68-0356-4708-8247-d1b78cd612f5","colab":{"base_uri":"https://localhost:8080/","height":238}},"source":["# print shape of reshaped data\n","print('reshaped test data dimensionality: ', x_test_r.shape)\n","\n","\n","\n","#print the attribute names\n","print('Attributes Names: ')\n","print(pd.DataFrame(x_test_r).columns)\n","\n","\n","# print first 5 rows in your dataset\n","print(\"head of the data:\")\n","print(pd.DataFrame(x_test_r).head(5))\n","\n","#prediction\n","y_pred_test= model_1.predict(x_test_r)\n","\n","\n","# Report your accuracy\n","accuracy_= accuracy_score(y_pred_test, y_test)\n","print(\"Accuracy score of model 1 with min samples split=2, on test data is \", accuracy_)\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["reshaped test data dimensionality:  (10000, 784)\n","Attributes Names: \n","RangeIndex(start=0, stop=784, step=1)\n","head of the data:\n","   0    1    2    3    4    5    6    ...  777  778  779  780  781  782  783\n","0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n","1  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n","2  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n","3  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n","4  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...  0.0  0.0  0.0  0.0  0.0  0.0  0.0\n","\n","[5 rows x 784 columns]\n","Accuracy score of model 1 with min samples split=2, on test data is  0.8768\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"u_XMXhm_AKPU"},"source":["## 8) REPORT\n","This homeworks aims at building a decision tree classifier using Scikit library, to classify the digits in MNIST dataset, downloaded from Keras library. Our problem necessites that there should be 3 decision three classifiers with different values of \"min_samples_split\" and by evaluating those models, we should choose the best performing model among them. \n","\n","When we first download the test and train data from the Keras, it is in the form of 2D numpy array. One can see it here : 2D x_train data dimensionality:(60000, 28, 28). But in order to train the model, we should provide a 1D data to the algorithm. Hence, as preprocessing we reshape the train and test data by using .reshape function and then normalize it by .normalize function. Also, for printing out the head of the data, we should use head method which is a method of Pandas DataFrame. Therefore, we make the conversion from numpy array to DataFrame. \n","\n","load_data() function provides training data and test data. However, we need validation set as well because we use train data to fit the model and then we use validation set for evaluation and then pick the model which works with higher accuracy on validation data. Validation set helps us while developing and picking the model. Then, we apply the chosen model on test data. In this homework, the train-validation split ratio is set to 0.2 by train_test_split function of sklearn.So we seperate 20% of traning data and reserve it as validation data. \n","\n","I have created 3 models with varying min_samples_split parameter, which is the min number of samples required to split an internal node. And I trained those models on training set.After, I applied trained models on validation and training data and calculated accuracy by using accuracy_score of sklearn metrics. We should evaluate the models by looking at the validation accuracies. Summarizing tables are as follows:\n","\n","| VALIDATION ACCURACIES                         |         |   |   |\n","|-----------------------------------------------|---------|---|---|\n","| model1: Decision tree classifier with min_samples_split=2  | 0.87008 |   |   |\n","| model2: Decision tree classifier with min_samples_split=5  | 0.86858 |   |   |\n","| model3: Decision tree classifier with min_samples_split=10 | 0.86841 |   |   |  \n","\n","| TRAINING ACCURACIES                           |        |   |   |\n","|-----------------------------------------------|--------|---|---|\n","| model1: Decision tree classifier with min_samples_split=2  | 1      |   |   |\n","| model2: Decision tree classifier with min_samples_split=5  | 0.9826 |   |   |\n","| model3: Decision tree classifier with min_samples_split=10 | 0.9665 |   |   |\n","\n","I have decided to choose model1: decision tree classifier with parameter min_samples_split=2 becauce I have obtained the best result/highest accuracy on validation set (0.87) with it. The chosen model 1 gives classification accuracy of 0.8768 on test data. Those accuracy values on seen and unseen data are pretty good and I conclude that model 1 works successfuly. Note that those accuracy values may change if we split the training data differently because model will be fitted onto different data, and note that accuracy values are quite similar, so other models are not bad but the best is model 1 for my tranining and validation split. \n"]}]}